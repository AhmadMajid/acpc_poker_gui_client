- matches_in_progress_for_game = AcpcTableManager::Match.running.and.where game_definition_key: game.to_sym
.panel.panel-success
  .panel-heading
    %h4.panel-title= "#{info['label']} against #{info['opponents'].keys.join(' and ')}"
  .panel-body
    .col-sm-6
      - unless info['hide_other_matches']
        .matches-in-progress.panel.panel-success
          .panel-heading
            %h3.panel-title Matches in Progress
          %table.table.table-striped.table-bordered
            %thead
              %tr
                %th Player
                %th= "#{matches_in_progress_for_game.length} / #{info['max_num_matches']}"
                - if ApplicationHelper::ENABLE_SPECTATING
                  %th
            %tbody
              - matches_in_progress_for_game.each do |m|
                %tr
                  %td= m.user_name
                  %td= hands_completed(m)
                  - if ApplicationHelper::ENABLE_SPECTATING
                    %td
                      %form.spectate_form
                        - spectate_or_rejoin_label = if user_started_match?(m) then '...' else 'Spectate' end
                        - spectate_button = {value: spectate_or_rejoin_label}
                        - spectate_button[:disabled] = true if matches.length > 0 || user_started_match?(m)
                        - spectate_button[:id] = if user_started_match?(m) then ApplicationHelper::REJOIN_BUTTON_ID else "#{ApplicationHelper::SPECTATE_BUTTON_ID_PREFIX}#{m.user_name}" end
                        %input.btn.btn-success{spectate_button}
                        - if user_started_match?(m)
                          :javascript
                            $("##{spectate_button[:id]}").click(function() {
                              rt.waitForMatchToStart(
                                WindowManager.packageMatchData(
                                  "#{m.id}",
                                  "#{m.last_slice_viewed}"
                                )
                              );
                            });
                        - else
                          :javascript
                            $("##{spectate_button[:id]}").click(function() {
                              rt.waitForMatchToStart(
                                WindowManager.packageMatchData(
                                  "#{m.id}",
                                  "#{m.last_slice_viewed}"
                                )
                              );
                              rt.spectate();
                            });
              - (info['max_num_matches'] - matches_in_progress_for_game.length).times do |i|
                %tr
                  %td
                  %td
                  - if ApplicationHelper::ENABLE_SPECTATING
                    %td
                      %form.spectate_form
                        %input.btn.btn-success{disabled: true, value: 'Spectate'}
    .col-sm-offset-2
    .col-sm-4
      .play_button_box
        = form_for match, url: new_match_url, remote: true do |f|
          - disabled_label = "Waiting..."
          - num_matches_in_queue = AcpcTableManager::Match.not_running.and.not_started.where(game_definition_key: game.to_sym).length
          - enqueue_match_text = "Enqueue match" + (if info['hide_other_matches'] then '' else " (#{num_matches_in_queue + 1} in line)" end)
          - play_button_text = if (matches_in_progress_for_game.length + num_matches_in_queue) < info['max_num_matches'] && matches_including_user_.empty? then "Play Match!" else "Enqueue match" end
          - play_button_attributes = {data: { disable_with: disabled_label }, class: 'btn btn-success', value: play_button_text}
          - if !matches_including_user_.empty?
            - play_button_attributes[:disabled] = 'disabled'
            - play_button_attributes[:value] = disabled_label
          - elsif user.name == User::DEFAULT_NAME
            - play_button_attributes[:disabled] = 'disabled'
            - play_button_attributes[:value] = "Sign-in to Play!"
          %input.hidden{type: 'hidden', id: 'game_definition_key', name: 'game_definition_key', value: game.to_sym}
          .form-actions
            = f.submit play_button_attributes
