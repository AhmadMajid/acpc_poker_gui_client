- if user_already_in_match?
  :javascript
    Realtime.listenForMatchToStart("#{match_id}", "#{match_home_url}");
  - if matches_to_rejoin && !matches_to_rejoin.empty?
    :javascript
      Realtime.onMatchHasStarted();
      Realtime.forceUpdateState();
  - else
    :javascript
      Realtime.controllerAction("#{enqueue_exhibition_match_url}");
.match_start
  .matches-in-progress
    %table.table.table-striped.table-bordered
      %thead
        %tr
          %th Matches in Progress
          %th= "#{num_matches_in_progress} / #{ApplicationHelper::MAX_NUM_MATCHES}"
          %th
      %tbody
        - Match.each do |m|
          %tr
            %td= m.user_name
            %td= if m.hand_number then "Hand #{m.hand_number + 1} / #{m.number_of_hands}" else '-----' end
            %td
              / @todo Spectate form
              %form.spectate_form
                %input.btn.btn-secondary{value: 'Spectate'}
        - min_num_rows_to_display = 20
        - (ApplicationHelper::MAX_NUM_MATCHES - num_matches_in_progress).times do |i|
          %tr
            %td
            %td
            %td
              %form.spectate_form
                %input.btn.btn-secondary{disabled: true, value: 'Spectate'}
  .play_button_box
    = form_for match, url: new_match_url, remote: true do |f|
      - disabled_label = "Waiting..."
      - play_button_attributes = {data: { disable_with: disabled_label }, class: 'btn btn-primary', value: if num_matches_in_progress < ApplicationHelper::MAX_NUM_MATCHES && !user_already_in_match? then "Play Match!" else "Play Match After #{num_matches_in_progress} Matches" end}
      - if user_already_in_match?
        - play_button_attributes[:disabled] = 'disabled'
        - play_button_attributes[:value] = disabled_label
      .form-actions
        = f.submit play_button_attributes
