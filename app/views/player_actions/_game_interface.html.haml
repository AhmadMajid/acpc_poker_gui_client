.game_interface
  .poker_table
    - match_view.opponents.sort_by { |opp| AcpcPokerTypes::Seat.new(opp['seat'], match_view.players.length).seats_from(match_view.user['seat'])  }.each_with_index do |opponent, i|
      .opponent{ :class => [acting_player_id(opponent['seat']), "opponent_#{i+1}_of_#{match_view.opponents.length}"] }
        = render partial: 'held_player_information', locals: {player: opponent}
        = render partial: 'outer_player_information', locals: { player: opponent, round: match_view.state.round, hand_ended: match_view.slice.hand_ended?, seat_with_dealer_button: match_view.slice.seat_with_dealer_button }

    .community_information
      .board_cards
        = render partial: 'cards', locals: {cards: match_view.state.board_cards.flatten}
      .pot
        / @todo Assumes Doyle's game in multi-player
        - pot = if match_view.slice.hand_ended? then 0 else match_view.pot_at_start_of_round end
        - if pot > 0
          = render partial: 'player_actions/chip_stack', locals: { amount: pot }
      .summary_information
        %p= "Actions: #{match_view.betting_sequence}"
        - if match_view.slice.match_ended?
          %p The match has ended, thanks for playing!
    .user{ :class => acting_player_id(match_view.user['seat']) }
      = render partial: 'outer_player_information', locals: { player: match_view.user, round: match_view.state.round, hand_ended: match_view.slice.hand_ended?, seat_with_dealer_button: match_view.slice.seat_with_dealer_button }
      = render partial: 'held_player_information', locals: { player: match_view.user }
  .action_dashboard{ class: if match_view.no_limit? then 'nolimit' else 'limit' end}
    - if match_view.slice.match_ended?
      .meta_action
        = button_tag leave_match_label, disabled: waiting_for_response, data: { disable_with: leave_match_label }, class: leave_match_button_html_class
    - elsif next_hand_button_visible?
      .meta_action
        - next_hand_label = "Next Hand"
        %button{ class: next_hand_id, disabled: waiting_for_response, data: { disable_with: next_hand_label } }= next_hand_label
    - else
      - fold_is_disabled_when = waiting_for_response || !(match_view.slice.users_turn_to_act? && match_view.slice.legal_actions.include?(AcpcPokerTypes::PokerAction::FOLD))
      - pass_action_button_label = if (match_view.slice.legal_actions.include?(AcpcPokerTypes::PokerAction::CALL) && match_view.user['amount_to_call'] > 0) then (if match_view.no_limit? then "Call (#{match_view.user['amount_to_call'].to_i})" else 'Call' end) else 'Check' end
      - make_wager_button_label = if match_view.slice.legal_actions.include?('b') then 'Bet' else 'Raise' end
      - make_wager_button_label += ' to' if match_view.no_limit?
      .action_modification_tools
        - if match_view.no_limit?
          .wager_amount-slider
            .slider_labels
              .slider_label.min Min
              .slider_label.half_pot 0.5
              .slider_label.three_quarters_pot 0.75
              .slider_label.one_pot Pot
              .slider_label.two_pot 2xPot
              .slider_label.all_in All-in
            .slider
              .ui_slider
          .wager_amount-num_field= number_field_tag :modifier, match_view.minimum_wager_to.to_i, min: match_view.minimum_wager_to.to_i, max: match_view.all_in.to_i, step: match_view.match.min_wagers[match_view.state.round].to_i
      .actions
        .poker_actn_btn
          - fold_label = 'Fold'
          - fold_attributes = { class: fold_html_class, type: 'submit', data: { disable_with: fold_label }}
          - fold_attributes[:disabled] = 'disabled' if fold_is_disabled_when
          %button{fold_attributes}= fold_label
        .poker_actn_btn
          - pass_attributes = { class: pass_html_class, type: 'submit', data: { disable_with: pass_action_button_label }}
          - pass_attributes[:disabled] = 'disabled' if waiting_for_response || !match_view.slice.users_turn_to_act?
          %button{pass_attributes}= pass_action_button_label
        .poker_actn_btn
          - wager_disabled_when = waiting_for_response || !match_view.slice.users_turn_to_act? || !(match_view.slice.legal_actions.include?(AcpcPokerTypes::PokerAction::RAISE) || match_view.slice.legal_actions.include?(AcpcPokerTypes::PokerAction::BET))
          - wager_attributes = { class: wager_html_class, type: 'submit', data: { disable_with: make_wager_button_label }}
          - wager_attributes[:disabled] = 'disabled' if wager_disabled_when
          %button{wager_attributes}= make_wager_button_label