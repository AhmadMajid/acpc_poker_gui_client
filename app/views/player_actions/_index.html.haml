- unless @match_view.slice.hand_ended? || @match_view.slice.match_ended? || @match_view.slice.users_turn_to_act?
  :javascript
    setTimeout(
      (function() { $('#hidden-check_next_state').submit() }),
      100
    );

= render partial: 'layouts/navbar', locals: {partial: 'navbar'}

/ .chip_balances.hero-unit
/   %h4= "#{@match_view.match.match_name} <span class=\"right\">#{@match_view.slice.hand_number+1} / #{@match_view.match.number_of_hands}</span>".html_safe
/   %table.table.table-striped
/     %thead
/       %tr
/         %th Player
/         %th Balance
/     %tbody
/       - @match_view.slice.players.each do |player|
/         %tr
/           %td= "#{player['name']}"
/           %td= "#{player['chip_balance'] + (if !@match_view.slice.hand_ended? && player['chip_contributions'].inject(:+) > 0 then player['chip_contributions'].inject(:+) else 0 end)}"
.game_interface
  .poker_table
    - opponents = @match_view.opponents
    - opponents << @match_view.opponents.first
    - opponents.each_with_index do |opponent, i|
      .opponent{ :class => [acting_player_id(opponent['seat']), "opponent_#{i+1}_of_#{opponents.length}"] }
        = render partial: 'held_player_information', locals: {player: opponent, hand_ended: @match_view.slice.hand_ended?, seat_with_dealer_button: @match_view.slice.seat_with_dealer_button, round: @match_view.state.round}
    .community_information
      %ul.board_cards
        = render partial: 'cards', locals: {cards: @match_view.state.board_cards.flatten}
      %ul.pot
        / @todo Assumes Doyle's game in multi-player
        - pot = if @match_view.slice.hand_ended? then 0 else @match_view.pot_at_start_of_round end
        - if pot > 0
          = render partial: 'player_actions/chip_stack', locals: { amount: pot }
      %ul.summary_information
        %li
          %p= "Actions: #{@match_view.betting_sequence}"
        - if @match_view.slice.match_ended?
          %li
            %p The match has ended, thanks for playing!
    .user
      .player{ :class => acting_player_id(@match_view.user['seat']) }
        = render partial: 'held_player_information', locals: {player: @match_view.user, hand_ended: @match_view.slice.hand_ended?, seat_with_dealer_button: @match_view.slice.seat_with_dealer_button, round: @match_view.state.round}

  - next_hand_button_should_be_visible = @match_view.slice.hand_ended? && !@match_view.slice.match_ended?

  .action_dashboard
    .hidden
      = check_update_state_form @match_id, "Hidden check for new state", class: 'hidden', id: 'hidden-check_next_state', disabled: (@match_view.slice.users_turn_to_act? || @match_view.slice.match_ended?) && !@match_view.slice.hand_ended?
      = update_state_form @match_id, "Hidden update state", class: 'hidden', id: 'hidden-next_state', disabled: (@match_view.slice.users_turn_to_act? || @match_view.slice.match_ended?) && !@match_view.slice.hand_ended?
    - if @match_view.slice.match_ended?
      .meta_action
        = link_to leave_match_label, leave_match_url, {remote: true, data: { confirm:  leave_match_confirmation_message, disable_with: leave_match_label }}
    - elsif next_hand_button_should_be_visible
      .meta_action
        - next_hand_label = "Next Hand"
        = button_tag next_hand_label, id: next_hand_id, class: ['btn', 'btn-info', 'btn-block', 'poker_action_button'], disabled: !@match_view.slice.hand_ended? || @match_view.slice.match_ended?, data: { disable_with: next_hand_label }
    - else
      - fold_label = 'Fold'
      - fold_is_disabled_when = !(@match_view.slice.users_turn_to_act? && @match_view.slice.legal_actions.include?('f'))
      - pass_action_button_label = if (@match_view.slice.legal_actions.include?('c') && @match_view.user['amount_to_call'] > 0) then (if @match_view.no_limit? then "Call (#{@match_view.user['amount_to_call'].to_i})" else 'Call' end) else 'Check' end
      - make_wager_button_label = if @match_view.slice.legal_actions.include?('b') then 'Bet' else 'Raise' end
      - make_wager_button_label += ' to' if @match_view.no_limit?
      - wager_classes = if @match_view.no_limit? then ['with_modifier'] else [] end
      .action_modification_tools
        - if @match_view.no_limit?
          .wager_amount-slider
            .slider_labels
              .slider_label.min Min
              .slider_label.half_pot 50%
              .slider_label.three_quarters_pot 75%
              .slider_label.one_pot Pot
              .slider_label.two_pot 2xPot
              .slider_label.all_in All-in
            .slider
              .ui_slider
          .wager_amount-num_field= number_field_tag :modifier
      .actions
        .poker_actn_btn= button_tag fold_label, poker_action_submission_options(fold_label, fold_is_disabled_when, [], ['fold'])
        .poker_actn_btn= button_tag pass_action_button_label, poker_action_submission_options(pass_action_button_label, !@match_view.slice.users_turn_to_act?, [], ['pass'])
        .poker_actn_btn= button_tag make_wager_button_label, poker_action_submission_options(make_wager_button_label, !@match_view.slice.users_turn_to_act?, wager_classes, ['wager'])
:javascript
  //ChipStackMutator.adjustAmountFontSizeOfAllStacks();

  ActionDashboard.disableButtonsOnClick();
  ActionDashboard.registerHiddenAction('fold');
  ActionDashboard.registerHiddenAction('pass');
  ActionDashboard.registerHiddenAction('wager');
  ActionDashboard.registerHiddenAction("#{next_hand_id}");
  ActionDashboard.adjustWagerOnSubmission(
    parseInt("#{@match_view.minimum_wager_to}"),
    parseInt("#{@match_view.user_contributions_in_previous_rounds}")
  );
  ActionDashboard.fixEnterWagerSubmission();
  // GameInterface.adjustPlayerSetSize();
- if @match_view.no_limit?
  :javascript
    var sliderValues;
    sliderValues = [
      parseInt("#{@match_view.minimum_wager_to}"),
      parseInt("#{(@match_view.pot_fraction_wager_to(1 / 2.to_f))}"),
      parseInt("#{(@match_view.pot_fraction_wager_to(3 / 4.to_f))}"),
      parseInt("#{@match_view.pot_fraction_wager_to}"),
      parseInt("#{(@match_view.pot_fraction_wager_to(2))}"),
      parseInt("#{@match_view.all_in}")
    ];
    WagerAmountSlider.initialize(sliderValues);
  :javascript
    GameInterface.adjustScale();

- if @match_view.slice.match_ended?
  :javascript
    $("##{leave_match_id}").focus();
- elsif next_hand_button_should_be_visible
  :javascript
    $("##{next_hand_id}").focus();
- else
  :javascript
    if (!$.browser.mozilla) {
      $('#user_poker_action_modifier').focus();
    }
- Match.delete_match!(@match_id) if @match_view.slice.match_ended?