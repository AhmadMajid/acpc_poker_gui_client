
// Setup non-display information -------------------

// If a new state is available, display a message to the user and allow the user to update the match state
- if @match_ended
   %h2 Match has ended, thanks for playing!
- elsif @users_turn_to_act
   // Show user actions
   #action_dashboard
      %h2 Actions
      //%p= button "Bet", bet_url, view_context.t('.bet')#, :amount_field => true
      .action
         %p= button "Call", call_url, 'call', match_id: @match_id, match_slice_index: @match_slice_index
         //%p= button "Check", check_url, view_context.t('.check')
      .action
         %p= button "Fold", fold_url, 'fold', match_id: @match_id, match_slice_index: @match_slice_index
      .action
         %p= button "Raise", raise_url, 'raise', amount_field: false, match_id: @match_id, match_slice_index: @match_slice_index
- else
   .new_state_available
      // Hidden form to allow AJAX to update the game's state
      // @todo The submit button is actually displayed so this function may not have the best name
      = hidden_update_state_form @match_id, @match_slice_index
   - if @hand_ended
      %h2 Hand ended.
      // Check if the state can be updated
      = hidden_check_for_new_match_state_form @match_id, @match_slice_index   
      :javascript
         setTimeout("check_for_new_match_state()", 100);
         // @todo Move this out of the view into a javascript helper file?
         function check_for_new_match_state() {
            $('.check_for_new_match_state_button').submit();
         };
   - else
      %h3 Updating match state...
      :javascript
         setTimeout("update_game_state()", 100);
         // @todo Move this out of the view into a javascript helper file?
         function update_game_state() {
            $('.update_match_state_button').submit();
         };
%hr
.match_information
   %h2 Match information:
   // @todo Get information from the game def
   %p= label :post, "match parameters: #{@parameters}"
.match_state
   %p= label :post, "match state from the dealer: #{@match_state}"
   %ul.players_information
      - @players.each do |player|
         %li.player_information
            - player.each do |key, value|
               %p= label :post, "#{key}: #{value}"
            %hr
   .table
      .board_cards
         %p= label :post, "Board cards: #{@board_cards}"
      .pot
         %p= label :post, "Pot size: #{@pot_size}"
      .betting_actions
         %p= label :post, "Betting actions so far: #{@betting_actions}"
      .round
         %p= label :post, "Round: #{@round}"
   .last_action
      %p= label :post, "Last action: #{@last_action}"

// Show meta-actions for the user
%hr
%p= button_to "Leave this game", leave_game_url, :class => 'leave', :id => 'leave', :remote => true, :confirm =>  "Are you sure you want to leave this game?"
