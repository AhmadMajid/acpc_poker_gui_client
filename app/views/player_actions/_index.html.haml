- if @match_view.no_limit?
  :javascript
    ActionDashboard.adjustWagerOnSubmission(
      parseInt("#{@match_view.minimum_wager_to.to_i}"),
      parseInt("#{@match_view.user_contributions_in_previous_rounds.to_i}"),
      parseInt("#{@match_view.all_in.to_i}")
    );
    ActionDashboard.fixEnterWagerSubmission();

    var sliderValues;
    sliderValues = [
      parseInt("#{@match_view.minimum_wager_to.to_i}"),
      parseInt("#{(@match_view.pot_fraction_wager_to(1 / 2.to_f)).to_i}"),
      parseInt("#{(@match_view.pot_fraction_wager_to(3 / 4.to_f)).to_i}"),
      parseInt("#{@match_view.pot_fraction_wager_to.to_i}"),
      parseInt("#{(@match_view.pot_fraction_wager_to(2)).to_i}"),
      parseInt("#{@match_view.all_in.to_i}")
    ];
    WagerAmountSlider.initialize(sliderValues);
:javascript
  function updateState() {
    return $(".#{update_id}").submit();
  };
  function wagerAmountField() {
    return $('.wager_amount-num_field > input#modifier');
  };
  function submitAction(action) {
    return sendAndLog(
      ws,
      JSON.stringify(
        {
          request: "#{ApplicationDefs::PLAY_ACTION_REQUEST_CODE}",
          match_id: "#{@match_view.match.id}",
          action: action
        }
      )
    );
  };
  ws.onmessage = function(e) {
    switch (e.data) {
    case "#{ApplicationDefs::PLAY_ACTION_REQUEST_CODE}":
      console.log("Recieved #{ApplicationDefs::PLAY_ACTION_REQUEST_CODE}");
      updateState();
      break;
    default:
      console.log('Unidentified reply: ' + e.data);
      break;
    };
  };
  $('.fold').click(function() { return submitAction("#{AcpcPokerTypes::PokerAction::FOLD}"); });
  $('.pass').click(function() { return submitAction("#{AcpcPokerTypes::PokerAction::CALL}"); });
  $('.wager').click(function() {
    return submitAction(
      (
        "#{AcpcPokerTypes::PokerAction::RAISE}" +
        wagerAmountField().val()
      )
    );
  });
  $(".#{next_hand_id}").click(function() { return updateState(); });

  // Must be done after initializing the websocket message sending click handlers
  ActionDashboard.disableButtonsOnClick();

  Hotkey.bind(".#{fold_html_class}", 'a');
  Hotkey.bind(".#{pass_html_class}", 's');
  Hotkey.bind(".#{wager_html_class}", 'd');
  Hotkey.bind(".#{nav_leave_html_class}", 'q');
  Hotkey.bind(".#{next_hand_id}", 'f');
- unless user_must_act?
  :javascript
    updateState();
.hidden
  = form_tag update_url, :remote => true do
    = hidden_field_tag :match_id, @match_view.match.id
    = submit_tag nil, class: update_id
= render partial: 'layouts/navbar', locals: {partial: 'navbar'}
= render partial: 'chip_balances'
= render partial: 'game_interface'

:javascript
  ChipStackMutator.adjustAmountFontSizeOfAllStacks();
  // Must come before change in focus code and as late into loading the page as possible
  // to make sure the window fits exactly as expected.
  GameInterface.adjustScale();
- if @match_view.slice.match_ended?
  :javascript
    $(".#{leave_match_button_html_class}").click(function() {
      return $(".#{nav_leave_html_class}").click();
    })
    $(".#{leave_match_button_html_class}").focus();
- elsif next_hand_button_visible?
  :javascript
    $(".#{next_hand_id}").focus();
- else
  :javascript
    if (Modernizr.inputtypes.number)
      wagerAmountField().focus();
- Match.delete_match!(@match_view.match.id) if @match_view.slice.match_ended?