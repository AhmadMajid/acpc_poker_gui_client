:javascript
  function nextHand() {
    Timer.clear();
    return rt.nextHand();
  };
  function submitAction(action) {
    Timer.clear();
    return rt.playAction(action);
  };
  $(".#{PlayerActionsHelper::FOLD_HTML_CLASS}").click(function() {
    return submitAction("#{AcpcPokerTypes::PokerAction::FOLD}");
  });
  $(".#{PlayerActionsHelper::PASS_HTML_CLASS}").click(function() {
    return submitAction("#{AcpcPokerTypes::PokerAction::CALL}");
  });
  $(".#{PlayerActionsHelper::WAGER_HTML_CLASS}").click(function() {
    var wagerAmount = wagerAmountField().val();
    var action = "#{AcpcPokerTypes::PokerAction::RAISE}"
    if (!isBlank(wagerAmount)) {
      action += wagerAmount;
    }
    return submitAction(action);
  });
  $(".#{PlayerActionsHelper::NEXT_HAND_ID}").click(function() { return nextHand(); });
- user.hotkeys.each do |hotkey|
  - label = hotkey.action
  - key = hotkey.key
  - if Hotkey::HOTKEY_LABELS_TO_ELEMENTS_TO_CLICK[label]
    :javascript
      Hotkey.bind("#{Hotkey::HOTKEY_LABELS_TO_ELEMENTS_TO_CLICK[label]}", "#{key}");
  - else
    - wager_amount = if label == Hotkey::MIN_WAGER_LABEL
      - match_view.minimum_wager_to
    - elsif label == Hotkey::ALL_IN_WAGER_LABEL
      - match_view.all_in
    - else
      - match_view.pot_fraction_wager_to(hotkey.hotkey_pot_fraction)
    :javascript
      Hotkey.bindWager("#{label}", "#{wager_amount}", "#{key}");
:javascript
  // Must be done after initializing the click handlers
  ActionDashboard.disableButtonsOnClick();