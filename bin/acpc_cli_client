#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'acpc_dealer'
require 'process_runner'

require_relative '../app/models/match'
require_relative '../app/models/match_slice'

require_relative '../lib/web_application_player_proxy'
require_relative '../lib/application_defs'

require 'pry'

class App
  include Methadone::Main
  include Methadone::CLILogging

  change_logger(Logger.new(File.join(ApplicationDefs::LOG_DIRECTORY, 'acpc_cli_client.log')))

  main do |name, game_definition_key, player_names, number_of_hands, random_seed, host|
    game_definition_key = game_definition_key.to_sym
    match = Match.start_match(
      name,
      game_definition_key,
      player_names,
      number_of_hands,
      random_seed
    )

    options = [
      # '--t_response ' << @match.millisecond_response_timeout.to_s,
      # '--t_hand ' << @match.millisecond_response_timeout.to_s,
      '--t_response -1',
      '--t_hand -1',
      '--t_per_hand -1'
      # '--t_per_hand ' << @match.millisecond_response_timeout.to_s
    ].join ' '

    match.port_numbers = AcpcDealer::DealerRunner.start(
      {
        match_name: match.match_name,
        game_def_file_name: match.game_definition_file_name,
        hands: match.number_of_hands,
        random_seed: match.random_seed,
        player_names: match.player_names.join(' '),
        options: options
      },
      ApplicationDefs::MATCH_LOG_DIRECTORY
    )[:port_numbers]
    match.save

    raise unless match.port_numbers.length == match.player_names.length

    port_numbers = match.port_numbers.dup
    users_port = port_numbers.delete_at(ApplicationDefs.users_seat_index(game_definition_key, match.player_names))

    # @todo Assumes localhost
    dealer_host = Socket.gethostname

    raise unless port_numbers.length == ApplicationDefs.bots(game_definition_key, match.player_names).length

    port_numbers.zip(ApplicationDefs.bots(game_definition_key, match.player_names)).each do |port_num, bot|
      # ENSURE THAT ALL REQUIRED KEY-VALUE PAIRS ARE INCLUDED IN THIS BOT
      # ARGUMENT HASH.
      bot_argument_hash = {
        port_number: port_num,
        millisecond_response_timeout: match.millisecond_response_timeout,
        server: dealer_host,
        game_def: match.game_definition_file_name
      }

      ProcessRunner.go bot.run_command(bot_argument_hash).split(' ')
    end

    WebApplicationPlayerProxy.logger = logger

    proxy = WebApplicationPlayerProxy.new(
      match.id,
      AcpcDealer::ConnectionInformation.new(users_port, dealer_host),
      ApplicationDefs.users_seat_index(game_definition_key, match.player_names),
      match.game_definition_file_name,
      match.player_names.join(' '),
      match.number_of_hands
    )

    current_slice = Match.find(match.id).slices.pop

    while !current_slice.match_ended? do
      puts current_slice.awesome_inspect
      print 'Your turn to act: '; STDOUT.flush
      action = AcpcPokerTypes::PokerAction.new(STDIN.gets.chomp)
      proxy.play! action
      current_slice = Match.find(match.id).slices.pop
    end

    puts current_slice.awesome_inspect
    puts "MATCH ENDED"

    match.delete
  end

  # Declare command-line interface
  description "Command line interface to play in an ACPC match."

  arg :name
  arg :game_definition_key
  arg :player_names, :optional
  arg :number_of_hands, :optional
  arg :random_seed, :optional
  arg :host, :optional

  version '1.0.0'

  use_log_level_option

  go!
end